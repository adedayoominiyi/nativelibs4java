/*
 * JavaCL - Java API and utilities for OpenCL
 * http://javacl.googlecode.com/
 *
 * Copyright (c) 2009-2013, Olivier Chafik (http://ochafik.com/)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Olivier Chafik nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY OLIVIER CHAFIK AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#macro (declareReusablePtrs)
	ReusablePointers ptrs = ReusablePointers.get();
#end
	
#macro (declareEventsIn)
	int[] eventsInCount = ptrs.int1Array;
	Pointer<cl_event> eventsIn = 
		CLAbstractEntity.copyNonNullEntities(eventsToWaitFor, eventsInCount, ptrs.events_in);
#end

#macro (declareEventOut)
	Pointer<cl_event> eventOut = 
		eventsToWaitFor == null || CLEvent.containsFireAndForget(eventsToWaitFor) 
		? null 
		: ptrs.event_out;
#end

#macro (declareEventsOutBlockable)
	Pointer<cl_event> eventOut = 
		blocking || eventsToWaitFor == null || CLEvent.containsFireAndForget(eventsToWaitFor) 
		? null 
		: ptrs.event_out;
#end

#macro (declarePErr)
	Pointer<Integer> pErr = ptrs.pErr;
#end

#macro (declareReusablePtrsAndPErr)
	#declareReusablePtrs()
	#declarePErr()
#end
	
#macro (checkPErr)
	error(pErr.getInt());
#end

#macro (declareReusablePtrsAndEventsInOut)
	#declareReusablePtrs()
	#declareEventsIn()
	#declareEventOut()
#end
	
#macro (declareReusablePtrsAndEventsInOutBlockable)
	#declareReusablePtrs()
	#declareEventsIn()
	#declareEventsOutBlockable()
#end
	
#macro (eventOutArg) eventOut #end
#macro (eventOutArgRaw) getPeer(eventOut) #end

#macro (eventsInArgsRaw) eventsInCount[0], getPeer(eventsIn) #end
#macro (eventsInArgs) eventsInCount[0], eventsIn #end

#macro (eventsInOutArgsRaw) #eventsInArgsRaw(), #eventOutArgRaw() #end
#macro (eventsInOutArgs) #eventsInArgs(), #eventOutArg() #end

#macro (eventOutWrapper $queue) CLEvent.createEventFromPointer($queue, eventOut) #end
#macro (returnEventOut $queue) return #eventOutWrapper($queue); #end
	
#macro (declareInfosGetter $name $function)
	protected static CLInfoGetter $name = new CLInfoGetter() {
		@Override
		protected int getInfo(long entity, int infoTypeEnum, long size, Pointer out, Pointer<SizeT> sizeOut) {
			return $function(entity, infoTypeEnum, size, getPeer(out), getPeer(sizeOut));
		}
	};
#end

#macro (documentEventsToWaitFor)
	 * @param eventsToWaitFor Events that need to complete before this particular command can be executed. Special value {@link CLEvent#FIRE_AND_FORGET} can be used to avoid returning a CLEvent.  
#end	
	
#macro (documentEventsToWaitForAndReturn)
#documentEventsToWaitFor()  
     * @return Event object that identifies this command and can be used to query or queue a wait for the command to complete, or null if eventsToWaitFor contains {@link CLEvent#FIRE_AND_FORGET}.
#end
	
#macro (documentEventsToWaitForAndPairReturn $firstContent)
#documentEventsToWaitFor()  
     * @return Pair with $firstContent and event object that identifies this command and can be used to query or queue a wait for the command to complete, or null if eventsToWaitFor contains {@link CLEvent#FIRE_AND_FORGET}.
#end
	
#macro (documentCallsFunction $functionName)
  * Calls <a href="http://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/${functionName}.html">$functionName</a>.<br>
#end

#macro (documentQueue)
  * @param queue Execution queue for this operation.
#end
	
